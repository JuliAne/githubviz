<script type="text/javascript" src="d3.js?2.7.2"></script>
<script src='d3.layout.js?2.7.2' type='text/javascript'></script>
<script src='d3.geom.js?2.7.2' type='text/javascript'> </script>
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js"></script>
<script type="text/javascript">
$(function (){
var fader = false;
var index = [];
var index2 = [];
var a = 0;
var b = 0;
var r1 = 700 / 2,
    r0 = r1 - 140;
var w = $(window).width() - 280;
var fill = d3.scale.category20();

var chord = d3.layout.chord()
    .padding(.02)

var arc = d3.svg.arc()
    .innerRadius(r0)
    .outerRadius(r0 + 20);

var clickarea = d3.select("#chart").append("div")
    .attr("class", "clickarea")
    .style("opacity", 0);

var svg = d3.select("#chart").append("svg")
    .attr("width", w)
    .attr("height", r1 * 2)
    .attr("class", "chord")
    //.attr("transform", "translate(" + r1 + "," + r1 + ")")
    //.attr("height", 10)
  .append("g")
    .attr("transform", "translate(" + r1 + "," + r1 + ")");	
  
d3.select("div.clickarea").on("click", fade2(1));

var json = <%= @circle_result.to_json %>; 

//alert(json);
//d3.json("flare-imports.json", function(imports) {
  var indexByName = {},
      nameByIndex = {},
      matrix = [],
      n = 0;

  // Returns the Flare package name for the given class name.
  function name(name) {
    return name;
  }

  // Compute a unique index for each package name.
  json.forEach(function(d) {
  	//alert(d);
    d = name(d.name);
    if (!(d in indexByName)) {
      nameByIndex[n] = d;
      indexByName[d] = n++;
    }
  });

  // Construct a square matrix counting package imports.
  json.forEach(function(d) {
    var source = indexByName[name(d.name)],
        row = matrix[source];
    if (!row) {
     row = matrix[source] = [];
     for (var i = -1; ++i < n;) row[i] = 0;
    }
    d.imports.forEach(function(d) { row[indexByName[name(d)]]++; });
  });
  
  var transposed_matrix = d3.transpose(matrix);
  //alert(transposed_matrix);	 
  chord.matrix(transposed_matrix);
  	
  var node = svg.selectAll("g.group")
      .data(chord.groups)
    .enter().append("g")

  node.append("path")
      .style("fill", "#BC4766")
      .style("stroke","#BC4766")
      .attr("d", arc)
      .on("mouseover", fade_mover(0))
      .on("mouseout", fade_mout(1));

  node.append("text")
      .each(function(d) { d.angle = (d.startAngle + d.endAngle) / 2; })
      .attr("class", "nodetext")
      .attr("dy", ".35em")
      .attr("text-anchor", function(d) { return d.angle > Math.PI ? "end" : null; })
      .attr("transform", function(d) {
        return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")"
            + "translate(" + (r0 + 26) + ")"
            + (d.angle > Math.PI ? "rotate(180)" : "");
      })
      .text(function(d) { return nameByIndex[d.index]; });

  svg.selectAll("path.chord")
      .data(chord.chords)
    .enter().append("path")
      .attr("class", "chord")
      .style("stroke", "#999999")
      .style("fill", "#999999" )
      .attr("d", d3.svg.chord().radius(r0))
      .style("opacity", 0);

//});
//show or hide chords of selected node by mouseover (depends on switching opacity on/ off in function fade2)
function fade_mover(opacity) {
  return function(g, i) {
    a = 0;
    b = 0;
    c = 0;
    index = [];
    index2 = [];
    //test = [];
    svg.selectAll("path.chord")
        .filter(function(d) {
		if (d.source.index == i && d.target.value != d.source.value){
			index[a] = [d.target.index];
			a += 1;	
		}	
		else if (d.source.index == i && d.target.value == d.source.value){
			index2[b] = [d.target.index];
			b += 1;
		}
		else if (d.target.index == i){
			index2[b] = [d.source.index];
			b += 1;
		}

		if (fader == false){
    	    opacity = 1;
			return d.source.index == i || d.target.index == i;
		}
		else if (fader == true) {
			opacity = 0;
			return d.source.index != i && d.target.index != i;
		}
        })
        .transition()
        .style("opacity", opacity)
		.duration(400)
		//alert("index1: " + index + "index2: " + index2);	
    	index.forEach(function(ind){
	    	svg.selectAll("path")
			.filter(function(d) {
			//alert ("ind: " + ind);
		 		return d.index == ind;	
				index = [];
				a = 0;
	    	})
	      	.transition()
			.style("stroke", "#124F62")
			.style("fill", "#124F62");
     	});
     	index2.forEach(function(ind2){
	    	svg.selectAll("path")
			.filter(function(d) {
			//alert ("ind2: " + ind2);
		 		return d.index == ind2;	
				index2 = [];
				b = 0;
	    	})
	      	.transition()
			.style("stroke", "#3190AF")
			.style("fill", "#3190AF");
     	});
     	svg.selectAll("path")
			.filter(function(d) {
				return d.index == i;	
	    	})
	      	.transition()
			.style("stroke", "#FBEF3A")
			.style("fill", "#FBEF3A");
  		};
};
//show or hide chords of selected node by mouseout (depends on switching opacity on/ off in function fade2)
function fade_mout(opacity) {
  return function(g, i) {
    a = 0;
    b = 0;
    index = [];
    index2 = [];
    svg.selectAll("path.chord")
        .filter(function(d) {
		if (d.source.index == i && d.target.value != d.source.value){
			index[a] = [d.target.index];
			a += 1;	
		}	
		else if (d.source.index == i && d.target.value == d.source.value){
			index2[b] = [d.target.index];
			b += 1;
		}
		else if (d.target.index == i){
			index2[b] = [d.source.index];
			b += 1;
		}
		if (fader == false){
			opacity = 0;
			return d.source.index == i || d.target.index == i;}
		else if (fader == true) {
			opacity = 1;
			return d.source.index != i && d.target.index != i;}
        })
      	.transition()
        .style("opacity", opacity)
		.duration(400)

     index.forEach(function(ind){
	    svg.selectAll("path")
		.filter(function(d) {
		 	return d.index == ind;	
			index = [];
			a = 0;
	   	 })
	    .transition()
		.style("stroke", "#BC4766")
		.style("fill", "#BC4766");
     });

     index2.forEach(function(ind2){
	    svg.selectAll("path")
		.filter(function(d) {
		 	return d.index == ind2;	
			index2 = [];
			b = 0;
	    	})
	      .transition()
		.style("stroke", "#BC4766")
		.style("fill", "#BC4766");
     });
     svg.selectAll("path")
        .filter(function(d) {
		return d.index == i;
	 })
      	.transition()
		.style("stroke", "#BC4766")
		.style("fill", "#BC4766");
  };
};
//show or hide all chords by clicking the center of the circle
function fade2(opacity) {
  return function(g, i) {
    if (fader == true){
    opacity = 0;
    fader = false;}
    else{
    opacity = 1;
    fader= true;}
    svg.selectAll("path.chord")
        .filter(function(d) {
          return d.source.index != i || d.target.index != i;
        })
      .transition()
        .style("opacity", opacity)
	.duration(400);
  };
};
});
</script>



    

